class Product {
    private int productId;
    private String name;
    private double price;
    private int stock;

    // Constructor
    public Product(int productId, String name, double price, int stock) {
        this.productId = productId;
        this.name = name;
        setPrice(price);
        setStock(stock);
    }

    // Getters
    public int getProductId() {
        return productId;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getStock() {
        return stock;
    }

    // Setters with validation
    public void setPrice(double price) {
        if (price >= 0) {
            this.price = price;
        } else {
            System.out.println("Price cannot be negative.");
        }
    }

    public void setStock(int stock) {
        if (stock >= 0) {
            this.stock = stock;
        } else {
            System.out.println("Stock cannot be negative.");
        }
    }
}

// User base class
class User {
    protected int userId;
    protected String username;
    protected String email;

    public User(int userId, String username, String email) {
        this.userId = userId;
        this.username = username;
        this.email = email;
    }
}

// Customer subclass
class Customer extends User {
    public Customer(int userId, String username, String email) {
        super(userId, username, email);
    }

    public void placeOrder(Product product, int quantity) {
        if (product.getStock() >= quantity) {
            product.setStock(product.getStock() - quantity);
            System.out.println("Order placed for " + quantity + " of " + product.getName());
        } else {
            System.out.println("Not enough stock to place order.");
        }
    }
}

// Admin subclass
class Admin extends User {
    public Admin(int userId, String username, String email) {
        super(userId, username, email);
    }

    public void updateProduct(Product product, double newPrice, int newStock) {
        product.setPrice(newPrice);
        product.setStock(newStock);
        System.out.println("Product updated: " + product.getName());
    }
}

// Main class to test functionality
public class ECommerceSystem2 {
    public static void main(String[] args) {
        Product product = new Product(1, "Laptop", 1000.0, 10);

        Customer customer = new Customer(101, "customer1", "customer@example.com");
        customer.placeOrder(product, 2);

        Admin admin = new Admin(201, "admin1", "admin@example.com");
        admin.updateProduct(product, 950.0, 20);
    }
}
